.. _ksm:

Serveur KSM
===========

Yubikey Key System Managment
----------------------------

Le KSM permet de gérer tous les secrets des YUBIKEY. Le "backend" utilisé est codé en python, la librairie s'appelle pyhsm-ksm. 

Elle permet :
* de se connecter directement à une YubiHSM
* de protéger la clef AES qui va chiffrer l'ensemble des secrets

L'interface qui exploite l'ensemble de ces fonctionnalités et une interface web REST. L'interface web est entièrement contrôlable et peut être modifiée.

Tous les secrets qui sont utilisés par le serveur KSM sont stockés dans une base de données. Les secrets sont générés aléatoirement et chiffrés avec une clef AES. À therme cette clef doit être stocké dans un YubiHSM.

.. seealso::
  Permettre au serveur KSM d'être utilisé avec une YubiHSM
  https://www.yubico.com/products/hardware-security-module/

Image Docker
------------

.. code-block:: yaml

  FROM debian
  ARG BUILD_DATE

  LABEL maintainer="b.aimard@adacis.net"
  LABEL build_date="${BUILD_DATE}"

  #Installation des paquets
  #RUN apt update; apt upgrade -y; apt-get install python3-software-properties software-properties-common -y; add-apt-repository ppa:yubico/stable -y ; apt-get update 
  #RUN apt-get install yhsm-yubikey-ksm python-pymysql -y

  RUN apt update && apt install -y python2 python-pip python-pymysql default-mysql-client libmariadbclient-dev
  RUN pip install pyhsm[db,daemon]
  RUN pip install sqlalchemy
  RUN pip install mysqlclient

  #Création des ressources
  RUN mkdir -p /etc/yubico/yhsm

  COPY ./generateKey.sh /etc/yubico/yhsm
  COPY ./generate_keys_bdd.py /etc/yubico/yhsm
  COPY ./decrypt_aead_bdd.py /etc/yubico/yhsm

  # VERSION FICHIER
  CMD ["yhsm-yubikey-ksm", "-D", "/etc/yubico/yhsm/keys.json", "-v",  "--key-handle", "1", "--addr", "0.0.0.0"]

  # ALTERNATIVE BDD
  #CMD ["yhsm-yubikey-ksm", "-D", "/dev/ttyACM0", "-v", "--key-handle", "1", "--addr", "0.0.0.0", "--db-url", "mysql://otp:otp@database/otp", "--debug"]

Docker compose
--------------

**Nous remplaçons la commande qui lance le ksm avec la base de données car nous ne voulons pas révéler ladite commande qui est utilisée.**

.. code-block:: yaml

   version: '3.8'
   services:
      ksm:
         image: juxo/ksm
         container_name: ksm
         environment:
         USER: ${USERDB}
         PASSWORD: ${PASSWORDDB}
         DATABASE: ${DATABASE}
         DATABASEIP: ${DATABASEIP}
         DATABASETYPE: mysql
         user: root
         command: ["yhsm-yubikey-ksm", "-D", "/etc/yubico/yhsm/keys.json", "-v", "--key-handle", "1", "--addr", "0.0.0.0", "--db-url", "mysql://${USERDB}:${PASSWORDDB}@${DATABASEIP}/${DATABASE}", "--debug"]
         volumes:
         - ./conf_ksm/keys.json:/etc/yubico/yhsm/keys.json
         networks:
         - auth

Installation
------------

.. WARNING::
  * La base de données doit être installée avant d'effectuer ces manipulations
  * Attention le fichier keys.json est la clef de voute du système est doit être protégé !

Generation d'une clef AES aléatoire
***********************************

#. Vérifier que tous les container sont à l'arrêt ``docker stop temp_ksm ; docker rm temp_ksm``.

#. Appeler le script intégré à l'image docker pour générer une clef ``docker run --name temp_ksm -it juxo/ksm /bin/bash -c "cd /etc/yubico/yhsm;./generateKey.sh"``

#. Copier localement la clef ``docker cp temp_ksm:/etc/yubico/yhsm/keys.json .``

#. Arrêter et supprimer les containers  ``docker stop temp_ksm ; docker rm temp_ksm``

#. Mettre des droits restreints sur la clef ``chmod 400 conf_ksm/keys.json``

.. code-block:: bash

   #Script complet

   #!/bin/bash
   docker stop temp_ksm
   docker rm temp_ksm
   docker run --name temp_ksm -it juxo/ksm /bin/bash -c "cd /etc/yubico/yhsm;./generateKey.sh"
   sleep 5
   docker cp temp_ksm:/etc/yubico/yhsm/keys.json .
   docker stop temp_ksm
   docker rm temp_ksm
   mv keys.json conf_ksm/keys.json
   chmod 400 conf_ksm/keys.json

Génération d'un secret pour yubikey
***********************************

Pour générer un secret dans le KSM taper la commande : 

``docker exec -t ksm sh -c 'python2 /etc/yubico/yhsm/generate_keys_bdd.py -D /etc/yubico/yhsm/keys.json --key-handle 1 -c 1'``

Vous pourrez vérfier dans la base de données qu'il a bien été crée

Affichage d'un secret pour yubikey
**********************************

Pour afficher un secret et le lire depuis le KSM : 

``docker exec -t ksm sh -c 'python2 /etc/yubico/yhsm/decrypt_aead_bdd.py -D /etc/yubico/yhsm/keys.json --public-id cccccccccccc'``

Command en une fois
*******************

``docker exec -e 'DATABASEHOST=database' -t ksm sh -c 'python2 /etc/yubico/yhsm/decrypt_aead_bdd.py -D /etc/yubico/yhsm/keys.json --public-id  $(python2 /etc/yubico/yhsm/generate_keys_bdd.py -D /etc/yubico/yhsm/keys.json --key-handle 1 -c 1)'``

Vous devriez avoir un affichage du type : 

``ykpersonalize -1 -ofixed=cccccccccccc -ouid=xxxxxxxxxxxxx -axxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx``

Vérification que le KSM est opérationnel
****************************************

* Modifier votre docker compose pour exposer le port 8002
* taper la commande suivante ou la mettre dans un navigateur avec la bonne adresse IP : 

``curl http://ksm:8002/wsapi/decrypt?otp=``

Vous optiendrez le status :

``ERR Invalid OTP``