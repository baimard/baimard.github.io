.. _radius:

Serveur freeradius
==================
Release
-------

* 0.3 -> ajout d'un dictionnaire avec l'attribut password-temporaire, intégration du code pin avant un otp yubikey


Présentation
------------

Le serveur `freeradius <https://wiki.freeradius.org/Home>`_ est un service qui écoute sur le port 1812, il intégre le protocole RADIUS (`RFC 2865 <https://tools.ietf.org/html/rfc2865>`_).

Globalement les échanges se déroulent comme suit : 

* Il y  a une requête Access-Request
* Le serveur radius la reçoit et utilise le protocole d'authentification associé
* Le serveur traite la demande
* Il renvoie un paquet Access-Accept ou Access-Reject

.. seealso::

    Le serveur peut déléguer l'authentification à un autre serveur radius selon des conditions. Dans ce cas, il effectuera une sorte de routage du paquet.

Image Docker
------------

L'image docker utilise le multistage Docker, cela permet de faire une image intermédiaire. Cette action est effectuée pour compiler un module qui n'a pas encore été propagé suite à des modifications. Le module concerné est le `YUBICO-PAM module <https://github.com/Yubico/yubico-pam>`_. Il permet notamment au radius d'interroger le serveur de validation yubico. Les dernières modifications qui ont été embarquées permettent de stocker dans une base de données la correspondance entre un utilisateur et une clef yubikey. (Fichier original yubikey-mapping)

.. code-block:: yaml

    ARG from=ubuntu:18.04
    FROM ${from} as builder
    ARG DEBIAN_FRONTEND=noninteractive

    RUN apt-get update
    RUN apt-get install -y libpam0g-dev libykclient-dev libykpers-1-dev libyubikey-dev asciidoc-base libmysqlclient-dev gcc make curl libtool autoconf automake pkg-config libpam-dev curl 

    ADD https://github.com/baimard/yubico-pam/archive/master.zip /yubico-pam.zip 

    RUN unzip /yubico-pam.zip
    RUN rm yubico-pam.zip ; mv yubico-pam-master yubico-pam

    WORKDIR /yubico-pam
    RUN autoreconf -fi
    WORKDIR /opt
    RUN /yubico-pam/configure --prefix="$PWD/inst" --without-ldap
    RUN make -j8
    RUN make install

    FROM ${from} as build

    RUN apt update && apt full-upgrade -y
    RUN apt-get install -y freeradius libpam0g-dev freeradius-mysql libykclient-dev libykpers-1-dev libyubikey-dev libmariadb3 libmysqlclient-dev

    RUN ln -s /etc/freeradius/3.0/mods-available/pam /etc/freeradius/3.0/mods-enabled/pam
    RUN ln -s /etc/freeradius/3.0/mods-available/sql /etc/freeradius/3.0/mods-enabled/sql

    RUN rm /etc/freeradius/3.0/sites-enabled/inner-tunnel
    RUN rm /etc/freeradius/3.0/mods-enabled/eap

    #PAM ADD
    COPY --from=builder /opt/inst/lib/security/pam_yubico.so /usr/lib/security/pam_yubico.so

    COPY docker-entrypoint.sh /

    RUN chown root:root /docker-entrypoint.sh
    RUN chmod 755 /docker-entrypoint.sh

    EXPOSE 1812/udp 1813/udp

    ENTRYPOINT ["/docker-entrypoint.sh"]

    CMD ["freeradius", "-X"]


    # COMPILE cd ~/Documents/yubicoServeurOtp/build_freeradius && docker build . -t juxo/freeradius-dev && cd ~/Documents/yubicoServeurOtp/projet_auth/ && docker-compose up -d freeradius && docker-compose logs -f freeradius

Docker compose
--------------

.. code-block:: yaml

   version: '3.8'
   services:
    freeradius:
      image: juxo/freeradius:0.3
      container_name: freeradius
      environment:
        USER: ${USERDB}
        PASSWORD: ${PASSWORDDB}
        DATABASE: ${DATABASE}
        DATABASEIP: ${DATABASEIP}
      volumes:
        - "./conf_freeradius/proxy.conf:/etc/freeradius/3.0/proxy.conf"
        - "./conf_freeradius/sql:/etc/freeradius/3.0/mods-available/sql"
        - "./conf_freeradius/default:/etc/freeradius/3.0/sites-available/default"
        - "./conf_freeradius/radiusd:/etc/pam.d/radiusd:ro"
      ports:
        - 1812:1812/udp

Fichiers de configuration
-------------------------

default
*******

* **la section listen** : Permet de mettre à l'écoute le serveur
* **authorize** : permet de contrôler la cohérence de la requête et l'existence de l'utilisateur
* **autenticate** : permet de contrôler que le secret utilisé est acceptable pour authentifier l'utilisateur
* **preacct** : opération avant la mise en log des traces
* **accounting** : log
* **post-auth** : après une authentification une série d'action en fonction de ce qui a été validé

.. code-block:: bash

    server default {

        listen {
            type = auth
            ipaddr = *
            port = 0
            limit {
                
                max_connections = 16
                lifetime = 0
                idle_timeout = 30
            }
        }

        listen {
            type = acct
            ipaddr = *
            port = 0
            
            limit {
                
                max_connections = 16
                lifetime = 0
                idle_timeout = 30
            }
        }

        authorize {
            filter_username
            preprocess

            #files
            sql
            if(!ok){
                # Delegation d'authentification
                suffix
            }

            #Pour les MDP en clair
            pap
            expiration
            logintime
        }

        authenticate {
            #Pour les MDP en clair
            Auth-Type PAP {
                pap
            }

            Auth-Type PAM {
                pam
            }
            pam
        }

        preacct {
            preprocess
        #	update request {
        #	  	&FreeRADIUS-Acct-Session-Start-Time = "%{expr: %l - %{%{Acct-Session-Time}:-0} - %{%{Acct-Delay-Time}:-0}}"
        #	}
            #files
        }

        accounting {
            detail
            unix
            -sql
            exec
            attr_filter.accounting_response
        }

        session {

        }

        post-auth {
            if (session-state:User-Name && reply:User-Name && request:User-Name && (reply:User-Name == request:User-Name)) {
                update reply {
                    &User-Name !* ANY
                }
            }
            update {
                &reply: += &session-state:
            }

            -sql
            exec

            Post-Auth-Type REJECT {
                -sql
                attr_filter.access_reject
            }

        }

        pre-proxy {
            #files
        }

        post-proxy {
        }
    }

sql
***

Il s'agit du fichier de configuration SQL. Le fichier est conforme à celui fourni par le service Freeradius sauf sur les lignes permettant de se connecter à la base de données. Nous les avons modifiés pour pouvoir prendre en compte des variables d'environnement. Ainsi les variables passés au container docker via le fichier **.env** permettent de se connecter à la base de données.

.. code-block:: bash

    server = $ENV{DATABASEIP}
    radius_db = $ENV{DATABASE}
    login = $ENV{USER}
    password = $ENV{PASSWORD}
    port = 3306

proxy.conf
**********
Le fichier proxy.conf sert à faire une delegation à un service d'authentification. Il peut se base sur un nom de domaine ou faire des ations par défaut.

.. code-block:: bash

    # home_server test1 {
    #         type = auth+acct
    #         ipaddr = 192.168.0.x
    #         port = 1812
    #         secret = xxxxx
    #         require_message_authenticator = yes
    #         response_window = 20
    #         zombie_period = 40
    #         revive_interval = 120
    #         status_check = status-server
    #         check_interval = 120
    #         num_answers_to_alive = 3
    # }

    # home_server_pool mypool {
    #         type = fail-over
    #         home_server = test1
    # }

    # realm DEFAULT {
    #         auth_pool       = mypool
    #         acct_pool       = mypool
    # }

radiusd
*******

Il s'agit du fichier PAM embarqué spécialement dans le freeradius et appelé spéciphiquement par le freeradius dans sa configuration PAM.

Voici la documentation des variables qui sont utilisables. `Git yubico-pam <https://github.com/Yubico/yubico-pam#configuration>`_

Les options que nous utilisons : 

* **auth sufficient** Pour ne pas que freeradius contrôle le compte sur le serveur mais uniquement dans la base de données
* **/usr/lib/security/pam_yubico.so** url vers la librairie que nous avons compilée
* **id=1** identifiant à fournir pour savoir qui se connect pour le serveur de validation, ainsi nous pouvons distinguer la provenance de requête
* **debug** Devient verbeux pour les logs du freeradius
* **urllist** fourni une liste de serveur de validation qui seront appelé successivement si le premier ne répond pas
* **mysql_XXX** variable pour la connexion à la base de données mysql

.. code-block:: bash

    auth sufficient /usr/lib/security/pam_yubico.so id=1 debug urllist=http://val/wsapi/2.0/verify mysql_server=database mysql_user=otp mysql_password=otp mysql_database=otp
    account sufficient /usr/lib/security/pam_yubico.so

installation
------------

Une fois que les fichiers de configuration sont correctement paramétrés.

.. code-block:: yaml

    docker-compose up -d freeradius

Vous pouvez utiliser la commande ``radtest`` provenant du packet freeradius-utils, pour faire des essais de connexion.

Insertion d'un client NAS
-------------------------

* Création d'un fichier sql avec à l'intérieur ceci : 

.. code-block:: bash

    INSERT INTO `nas` (`id`, `nasname`, `shortname`, `type`, `ports`, `secret`, `server`, `community`, `description`) VALUES (NULL, '0.0.0.3/32', 'test', 'other', NULL, '123456789', NULL, NULL, 'RADIUS Client');

* Insérer dans la base de données comme suit :

.. code-block:: bash

    docker exec -i database sh -c 'exec mysql -u $MYSQL_USER -p$MYSQL_PASSWORD -D $MYSQL_DATABASE' < test.sql

